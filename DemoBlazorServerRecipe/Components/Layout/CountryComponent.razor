@page "/Country"
@page "/Country/{Id:int}"

@using DemoBlazorServerRecipe.Data.Services.Interfaces
@using DemoBlazorServerRecipe.Models.DTO

@inject IRecipeService recipeService
@inject NavigationManager navigationManager

<SfDialog Width="600px" ShowCloseIcon="false" AllowPrerender="true" IsModal="true" style="border:3px solid #0d6efd"> 
     <DialogTemplates>
         <Content>
             <!--
            <MessageComponent Message="@Message" Visibility="@Visibility" NavigateTo="@NavigateTo"></MessageComponent>
            -->
            <EditForm Model="CountryObject" OnValidSubmit="CreateCountry">
                <div class="card">
                    <div class="card-header fw-bold h5 text-light bg-primary"><i class="oi oi-globe"></i> @Title </div>
                    <div class="card-body">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-control">
                            <SfTextBox Placeholder="Country Name" @bind-Value="CountryObject.CountryName" FloatLabelType="@FloatLabelType.Auto"></SfTextBox>
                            <ValidationMessage For="(()=> CountryObject.CountryName)"/>
                        </div>
                        <div class="form-control">
                            <SfUploader AutoUpload="true" AllowMultiple="false" AllowedExtensions=" .png, .PNG, .jpeg, .JPEG, .jpg, .JPG">
                                <UploaderEvents ValueChange="OnChange"></UploaderEvents>
                            </SfUploader>
                        </div>
                        <div>
                            <table>
                                <tr>
                                    <td>
                                        @if (Id > 0)
                                        {
                                            <button type="submit" class="btn btn-primary m-3"><i class="oi oi-loop-circular"></i>Update Procedure</button>
                                        }
                                        else
                                        {
                                            <button type="submit" class="btn btn-primary m-3"><i class="oi oi-plus"></i>Add Procedure</button>
                                        }
                                    </td>
                                    <td><button type="button" class="btn btn-warning m-3" @onclick="Cancel"><i class="oi oi-circle-x"></i>Cancel</button></td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </EditForm>
         </Content>

     </DialogTemplates>
</SfDialog>

@code
{
    [Parameter] public int Id { get; set; }
    public bool Visibility { get; set; }
    public string Message { get; set; } = string.Empty;
    public string NavigateTo { get; set; } = string.Empty;

    CountryDTO CountryObject = new();
    public string Title { get; set; } = string.Empty;

    async Task CreateCountry()
    {
        if (CountryObject is null) return;
        var result = await recipeService.AddOrUpdateCountryAsync(CountryObject);

        switch (result)
        {
            case 200:
                Message = "Successfully Updated";
                Visibility = true;
                NavigateTo = "/countries";
                break;

            case 201:
                Message = "Successfully Created";
                Visibility = true;
                NavigateTo = "/countries";
                break;

            case 400:
                Message = "All fields required";
                Visibility = true;
                NavigateTo = "/country";
                break;

            case 404:
                Message = "Country not found";
                Visibility = true;
                NavigateTo = "/country";
                break;

            case 406:
                Message = "Country already added";
                Visibility = true;
                NavigateTo = "/country";
                break;

            case 501:
                Message = "sorry no change was made";
                Visibility = true;
                NavigateTo = "/countries";
                break;
        }
    }


    public void Cancel()
    {
        navigationManager.NavigateTo("/countries");
    }

    private async void OnChange(UploadChangeEventArgs args)
    {
        foreach(var file in args.Files)
        {
            string format = string.Empty;
            if (file.FileInfo.Name.ToLower().Contains("png"))
                format = "imag/png";
            if (file.FileInfo.Name.ToLower().Contains("jpg"))
                format = "imag/jpg";
            if (file.FileInfo.Name.ToLower().Contains("png"))
                format = "imag/png";

            var selectedFile = file.File;
            var resizeImage = await selectedFile.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            CountryObject.Image = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        }
    }

    protected override void OnInitialized()
    {
        Title = "Add Recipe Origin";
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        {
            CountryObject = await recipeService.GetCountryByIdAsync(Id);
            Title = "Update Recipe Origin";
            return;
        }
        Title = "Add Recipe Origin";
    }
}